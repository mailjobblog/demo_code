# 拉取redis镜像
docker pull redis
----------------------------
[root@VM-0-15-centos ~]# docker images
REPOSITORY    TAG       IMAGE ID       CREATED         SIZE
ubuntu        18.04     c090eaba6b94   13 days ago     63.3MB
redis         latest    621ceef7494a   2 weeks ago     104MB
----------------------------

# 创建父节点redis
docker run -itd -p 6000:6379 --name redis-father 621ceef7494a

# 创建子节点 redis1 redis2
docker run -itd -p 6001:6379 --name redis-son1 621ceef7494a
docker run -itd -p 6002:6379 --name redis-son2 621ceef7494a

# 查看启动容器
docker ps

# 进父节点看看去
docker exec -it 9430b0caf133 /bin/bash

# 查看容器网络信息
docker inspect 9430b0caf133

# 父节点ip
>> "IPAddress": "172.17.0.2"

# 看看子节点的ip
# redis son1 节点 
>> "IPAddress": "172.17.0.3"
# redis son2 节点
>> "IPAddress": "172.17.0.4"

# 所以当前三个节点信息如下
---------------------------------
父：172.17.0.3:6000
子：172.17.0.3:6001
子：172.17.0.3:6002
---------------------------------


# 进入两个子节点容器，通过客户端命令配置主从
## 通过redis-master内网ip+端口配置
>> slaveof 172.17.0.2 6379
## 通过公网ip+run的端口配置
>> slaveof 49.233.105.xxx 6000

# 命令窗，查看节点信息
127.0.0.1:6379> info replication

# 父节点查看
127.0.0.1:6379> info replication
# Replication
role:master
connected_slaves:2
slave0:ip=49.233.105.xxx,port=6379,state=online,offset=1762,lag=0	# 从节点1
slave1:ip=172.17.0.4,port=6379,state=online,offset=1762,lag=1		# 从节点2
master_replid:d70a67dbcd5f8d4cc0ec94364271794a467e8957
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:1762
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:1762

# 子节点查看
127.0.0.1:6379> info replication
# Replication
role:slave
master_host:172.17.0.2
master_port:6379
master_link_status:up
master_last_io_seconds_ago:1
master_sync_in_progress:0
slave_repl_offset:1818
slave_priority:100
slave_read_only:1
connected_slaves:0
master_replid:d70a67dbcd5f8d4cc0ec94364271794a467e8957
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:1818
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:741
repl_backlog_histlen:1078


# 遇到的问题
配置的时候，用 slaveof 172.17.0.2 6000 的 6000 端口配置的，结果失败。
看来是我对 docker 网络这一块理解的不够深刻，刚刚开始觉得应该容器需要通过外面的那一层壳通信，结果内部可以直接通信
看了一下docker文档
https://docker_practice.gitee.io/zh-cn/advanced_network/
发现容器的网络都是关在docker0这个网桥上面
外部通信需要 端口映射到内部，内部通信直接基于 docker0 进行通信，不需要外部映射这个步骤了